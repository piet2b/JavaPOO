Quest˜ao 1 O princ´ıpio de responsabilidade ´unica (SRP) dita que uma determinada classe deve ter uma ´unica
responsabilidade. A classe Java a seguir est´a violando o princ´ıpio da responsabilidade ´unica?
1 public class UserService {
2 public void registerUser ( User user ) {
3 // Logica para registrar um novo usuario
4 }
5
6 public void sendWelcomeEmail ( User user ) {
7 // Logica para enviar um e- mail de boas - vindas ao usuario
8 }
9 }
Resposta Sim, o m´etodo registerUser est´a violando o princ´ıpio da responsabilidade ´unica, pois est´a realizando
duas tarefas distintas: registrar o usu´ario e enviar um e-mail de boas-vindas. E recomendado separar essas fun- ´
cionalidades em classes diferentes, como UserRegistrationService e EmailService, cada uma com uma ´unica
responsabilidade.
Quest˜ao 2 O princ´ıpio do aberto-fechado (OCP) indica que o c´odigo deve ser aberto a extens˜oes mas fechado para
modifica¸c˜oes. Com base nisso, o c´odigo a seguir quebra o princ´ıpio de OCP? Como podemos adicionar novos tipos
de pagamento ao sistema sem modificar o c´odigo existente?
1 public interface PaymentMethod {
2 void pay ( double amount );
3 }
4
5 public class CreditCardPayment implements PaymentMethod {
6 public void pay ( double amount ) {
7 // Logica para processar pagamento com cartao de credito
8 }
9 }
10
11 public class PayPalPayment implements PaymentMethod {
12 public void pay ( double amount ) {
13 // Logica para processar pagamento com PayPal
14 }
15 }
16
17 public class PaymentProcessor {
18 public void processPayment ( PaymentMethod paymentMethod , double amount ) {
19 paymentMethod . pay ( amount ) ;
20 }
21 }
Resposta O c´odigo j´a segue o princ´ıpio aberto-fechado, pois ´e poss´ıvel adicionar novos tipos de pagamento imple1
mentando a interface PaymentMethod e criando uma nova classe que implementa os detalhes de processamento
de pagamento desse novo m´etodo. A classe PaymentProcessor permanecer´a inalterada, podendo aceitar qualquer
nova implementa¸c˜ao de PaymentMethod sem a necessidade de modifica¸c˜ao.
Quest˜ao 3 O princ´ıpio de substitui¸c˜ao de Liskov declara que as classes derivadas devem poder ser substitu´ıdas
pelas suas classes bases. A classe derivada Violin n˜ao est´a obedecendo ao princ´ıpio de substitui¸c˜ao de Liskov?
1 public class Instrument {
2 public void play () {
3 // Logica generica de reproducao de instrumento
4 }
5 }
6
7 public class Violin extends Instrument {
8 public void play () {
9 // Logica especifica para tocar violino
10 }
11 }
Resposta N˜ao, a classe derivada Violin est´a obedecendo ao princ´ıpio de substitui¸c˜ao de Liskov, pois ela n˜ao
modifica ou quebra o comportamento esperado do m´etodo play() definido na classe base Instrument. Ela apenas
fornece uma implementa¸c˜ao espec´ıfica para tocar o violino, sem alterar a assinatura ou o contrato do m´etodo na
hierarquia de classes.
Quest˜ao 4 O princ´ıpio de segrega¸c˜ao de interfaces (ISP) dita que o usu´ario n˜ao deve depender de m´etodos de
interfaces que ele n˜ao utiliza. Com base nisso, uma interface ´unica e gen´erica est´a violando o princ´ıpio de segrega¸c˜ao
de interfaces?
1 public interface Printer {
2 void print ( Document document );
3 void scan ( Document document );
4 void fax ( Document document );
5 }
Resposta Sim, essa interface est´a violando o princ´ıpio de segrega¸c˜ao de interfaces, pois obriga as classes que a
implementam a fornecer implementa¸c˜oes para todos os m´etodos, mesmo que n˜ao sejam relevantes ou necess´arios.
E recomendado dividir essa interface em interfaces menores e mais espec´ıficas, como ´ Printable, Scannable e
Faxable, para que as classes possam implementar apenas as interfaces relevantes para suas funcionalidades.
2
Quest˜ao 5 Responda com base no c´odigo a seguir. A classe derivada Square n˜ao est´a obedecendo ao princ´ıpio
de substitui¸c˜ao de Liskov?
1 public class Rectangle {
2 protected int width ;
3 protected int height ;
4
5 public Rectangle (int width , int height ) {
6 this . width = width ;
7 this . height = height ;
8 }
9
10 public int getWidth () {
11 return width ;
12 }
13
14 public void setWidth ( int width ) {
15 this . width = width ;
16 }
17
18 public int getHeight () {
19 return height ;
20 }
21
22 public void setHeight ( int height ) {
23 this . height = height ;
24 }
25
26 public int getArea () {
27 return width * height ;
28 }
29 }
30
31 public class Square extends Rectangle {
32 public Square ( int sideLength ) {
33 super ( sideLength , sideLength );
34 }
35
36 @Override
37 public void setWidth ( int width ) {
38 super . setWidth ( width );
39 super . setHeight ( width );
40 }
41
42 @Override
43 public void setHeight ( int height ) {
44 super . setHeight ( height );
45 super . setWidth ( height );
46 }
47 }
Resposta Sim, a classe derivada Square est´a violando o princ´ıpio de substitui¸c˜ao de Liskov. Embora um quadrado
possa ser considerado um tipo especial de retˆangulo, a sobrescrita dos m´etodos setWidth() e setHeight() na classe
Square para manter a mesma largura e altura viola a expectativa de comportamento da hierarquia de classes.
A mudan¸ca de altura em um quadrado tamb´em altera automaticamente a largura, o que n˜ao ´e v´alido para um
retˆangulo gen´erico.
3
Quest˜ao 6 Uma classe Java est´a seguindo o princ´ıpio KISS?
1 public class Calculator {
2 public int add (int a , int b) {
3 return a + b;
4 }
5
6 public int multiply (int a , int b) {
7 return a * b;
8 }
9
10 public int subtract (int a , int b) {
11 return a - b;
12 }
13
14 public int divide ( int a , int b) {
15 return a / b;
16 }
17 }
18 s
Resposta Sim, a classe Calculator segue o princ´ıpio KISS ao fornecer m´etodos simples e diretos para as opera¸c˜oes
b´asicas de adi¸c˜ao, multiplica¸c˜ao, subtra¸c˜ao e divis˜ao. O c´odigo ´e conciso, f´acil de entender e n˜ao cont´em complexidade desnecess´aria.
Quest˜ao 7 O trecho de c´odigo Java est´a seguindo o princ´ıpio DRY?
1 public void processOrder ( Order order ) {
2 if ( order . getStatus () . equals (" PENDING ") ) {
3 // Logica para processar um pedido pendente
4 // ...
5 } else if ( order . getStatus () . equals (" SHIPPED ")) {
6 // Logica para processar um pedido enviado
7 // ...
8 } else if ( order . getStatus () . equals (" DELIVERED ")) {
9 // Logica para processar um pedido entregue
10 // ...
11 } else if ( order . getStatus () . equals (" CANCELLED ")) {
12 // Logica para processar um pedido cancelado
13 // ...
14 }
15 }
Resposta N˜ao, o trecho de c´odigo n˜ao segue o princ´ıpio DRY. A verifica¸c˜ao repetitiva do estado do pedido
(order.getStatus()) resulta em duplica¸c˜ao de c´odigo. Para seguir o princ´ıpio DRY, seria mais adequado utilizar uma abordagem que evite a repeti¸c˜ao de c´odigo, como um switch ou uma estrat´egia de mapeamento entre
status e l´ogica de processamento.
4
Quest˜ao 8 A classe Java a seguir est´a utilizando o princ´ıpio KISS?
1 public class Circle {
2 private double radius ;
3
4 public Circle ( double radius ) {
5 this . radius = radius ;
6 }
7
8 public double calculateArea () {
9 return Math . PI * radius * radius ;
10 }
11 }
Resposta Sim, a classe Circle segue o princ´ıpio KISS. Ela possui apenas o necess´ario para representar um c´ırculo
e calcular sua ´area. O c´odigo ´e simples, direto e n˜ao possui complexidade desnecess´aria.
Quest˜ao 9 A seguinte classe Java est´a violando o princ´ıpio KISS?
1 public class DataProcessor {
2 // Metodo com logica complexa que abrange varias responsabilidades
3 public void processData ( List < Data > dataList ) {
4 // Logica para processar e analisar os dados
5 // ...
6 // Logica para gerar relatorios dos dados processados
7 // ...
8 // Logica para enviar notificacoes baseadas nos dados processados
9 // ...
10 // Mais logica complexa ...
11 // ...
12 }
13 }
Resposta Sim, a classe DataProcessor viola o princ´ıpio KISS. O m´etodo processData cont´em uma l´ogica
complexa que abrange v´arias responsabilidades, o que dificulta a compreens˜ao e a manuten¸c˜ao do c´odigo. Seria
mais adequado dividir essas responsabilidades em classes separadas, cada uma com uma ´unica responsabilidade.
Quest˜ao 10 O trecho de c´odigo Java a seguir est´a seguindo o princ´ıpio DRY?
1 public void calculateRectanglePerimeterAndArea ( double width , double height ) {
2 double perimeter = 2 * ( width + height );
3 double area = width * height ;
4
5 System . out . println (" Perimeter : " + perimeter );
6 System . out . println (" Area : " + area );
7 }
Resposta Sim, o trecho de c´odigo segue o princ´ıpio DRY. As f´ormulas para calcular o per´ımetro e a ´area do
retˆangulo s˜ao definidas apenas uma vez e reutilizadas para obter os valores desejados. N˜ao h´a repeti¸c˜ao de l´ogica
ou duplica¸c˜ao de c´odigo.
5
Quest˜ao 11 O trecho de c´odigo Java a seguir est´a violando o princ´ıpio DRY?
1 public void printUserDetails ( User user ) {
2 System . out . println (" Name : " + user . getName () );
3 System . out . println (" Email : " + user . getEmail () ) ;
4 System . out . println (" Phone : " + user . getPhone () ) ;
5 // Mais linhas de codigo similares ...
6 System . out . println (" Address : " + user . getAddress () ) ;
7 }
Resposta Sim, o trecho de c´odigo viola o princ´ıpio DRY. A repeti¸c˜ao da estrutura System.out.println() para
exibir os detalhes do usu´ario resulta em duplica¸c˜ao de c´odigo. Seria mais adequado utilizar um loop ou uma
abordagem mais gen´erica para imprimir os detalhes do usu´ario sem repeti¸c˜ao de c´odigo.